## java8新特性
[Java8教学网站](<https://www.tutorialspoint.com/java8/index.htm>)

#### Lambda表达式

Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中。)

* **语法**

  ```
  (parameters) -> expression
  或
  (parameters) ->{ statements; }
  ```

* lambda表达式的重要特征:

  * **可选类型声明：**不需要声明参数类型，编译器可以统一识别参数值。
  * **可选的参数圆括号：**一个参数无需定义圆括号，但多个参数需要定义圆括号。
  * **可选的大括号：**如果主体包含了一个语句，就不需要使用大括号。
  * **可选的返回关键字：**如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。

* Lambda表达式实例

  ```
  public class Java8Tester {
     public static void main(String args[]){
        Java8Tester tester = new Java8Tester();
          
        // 类型声明
        MathOperation addition = (int a, int b) -> a + b;
          
        // 不用类型声明
        MathOperation subtraction = (a, b) -> a - b;
          
        // 大括号中的返回语句
        MathOperation multiplication = (int a, int b) -> { return a * b; };
          
        // 没有大括号及返回语句
        MathOperation division = (int a, int b) -> a / b;
          
        System.out.println("10 + 5 = " + tester.operate(10, 5, addition));
        System.out.println("10 - 5 = " + tester.operate(10, 5, subtraction));
        System.out.println("10 x 5 = " + tester.operate(10, 5, multiplication));
        System.out.println("10 / 5 = " + tester.operate(10, 5, division));
          
        // 不用括号
        GreetingService greetService1 = message ->
        System.out.println("Hello " + message);
          
        // 用括号
        GreetingService greetService2 = (message) ->
        System.out.println("Hello " + message);
          
        greetService1.sayMessage("Runoob");
        greetService2.sayMessage("Google");
     }
      
     interface MathOperation {
        int operation(int a, int b);
     }
      
     interface GreetingService {
        void sayMessage(String message);
     }
      
     private int operate(int a, int b, MathOperation mathOperation){
        return mathOperation.operation(a, b);
     }
  }
  ```

  ```
  10 + 5 = 15
  10 - 5 = 5
  10 x 5 = 50
  10 / 5 = 2
  Hello Runoob
  Hello Google
  ```

  使用 Lambda 表达式需要注意以下两点：

  - Lambda 表达式主要用来定义行内执行的方法类型接口，例如，一个简单方法接口。在上面例子中，我们使用各种类型的Lambda表达式来定义MathOperation接口的方法。然后我们定义了sayMessage的执行。
  - Lambda 表达式免去了使用匿名方法的麻烦，并且给予Java简单但是强大的函数化的编程能力。

* 变量作用域

  lambda 表达式只能**引用**标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。

  可以直接在 lambda 表达式中访问外层的局部变量。

  lambda 表达式的局部变量可以不用声明为 final，但是必须不可被后面的代码修改（即隐性的具有 final 的语义）

  在 Lambda 表达式当中不允许声明一个与局部变量同名的参数或者局部变量。

#### 方法引用

方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。

方法引用通过方法的名字来指向一个方法。

方法引用可以使语言的构造更紧凑简洁，减少冗余代码。

方法引用使用一对冒号 **::** 。

```
package com.runoob.main;
 
@FunctionalInterface
public interface Supplier<T> {
    T get();
}
 
class Car {
    //Supplier是jdk1.8的接口，这里和lamda一起使用了
    public static Car create(final Supplier<Car> supplier) {
        return supplier.get();
    }
 
    public static void collide(final Car car) {
        System.out.println("Collided " + car.toString());
    }
 
    public void follow(final Car another) {
        System.out.println("Following the " + another.toString());
    }
 
    public void repair() {
        System.out.println("Repaired " + this.toString());
    }
}
```

* **构造器引用：**它的语法是Class::new，或者更一般的Class< T >::new实例如下

  ```
  final Car car = Car.create( Car::new );
  final List< Car > cars = Arrays.asList( car );
  ```

* **静态方法引用：**它的语法是Class::static_method，实例如下：

  ```
  cars.forEach( Car::collide );
  ```

* **特定类的任意对象的方法引用：**它的语法是Class::method实例如下:

  ```
  cars.forEach( Car::repair );
  ```

* **特定对象的方法引用：**它的语法是instance::method实例如下：

  ```
  final Car police = Car.create( Car::new );
  cars.forEach( police::follow );
  ```

#### Stream API

新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。

Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。

Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。

这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。

元素流在管道中经过中间操作（intermediate operation）的处理，最后由最终操作(terminal operation)得到前面处理的结果。

* 什么是Stream?

  Stream（流）是一个来自数据源的元素队列并支持聚合操作

  * 元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。
  * **数据源** 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。
  * **聚合操作** 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。

* **生成流**

  * **stream()** -- 为集合创建串行流
  * **parallelStream** -- 为集合创建并行流

* **forEach**

  Stream 提供了新的方法 'forEach' 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数：

  ```
  Random random = new Random();
  random.ints().limit(10).forEach(System.out::println);
  ```

* **map**

  map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：

  ```
  List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);
  // 获取对应的平方数
  List<Integer> squaresList = numbers.stream().map( i -> i*i).distinct().collect(Collectors.toList());
  ```

* **filter**

  filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：

  ```
  List<String>strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");
  // 获取空字符串的数量
  int count = strings.stream().filter(string -> string.isEmpty()).count();
  ```

* **limit**

  limit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 10 条数据：

  ```
  Random random = new Random();
  random.ints().limit(10).forEach(System.out::println);
  ```

* **sorted**

  sorted 方法用于对流进行排序。以下代码片段使用 sorted 方法对输出的 10 个随机数进行排序：

  ```
  Random random = new Random();
  random.ints().limit(10).sorted().forEach(System.out::println);
  ```

* **并行（parallel）程序**

  parallelStream 是流并行处理程序的代替方法。以下实例我们使用 parallelStream 来输出空字符串的数量：

  ```
  List<String> strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");
  // 获取空字符串的数量
  int count = strings.parallelStream().filter(string -> string.isEmpty()).count()
  ```

* **Collectors**

  Collectors 类实现了很多归约操作，例如将流转换成集合和聚合元素。Collectors 可用于返回列表或字符串：

  ```
  List<String>strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");
  List<String> filtered = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.toList());
   
  System.out.println("筛选列表: " + filtered);
  String mergedString = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.joining(", "));
  System.out.println("合并字符串: " + mergedString);
  ```

* **统计**

  另外，一些产生统计结果的收集器也非常有用。它们主要用于int、double、long等基本类型上，它们可以用来产生类似如下的统计结果。

  ```
  List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);
   
  IntSummaryStatistics stats = numbers.stream().mapToInt((x) -> x).summaryStatistics();
   
  System.out.println("列表中最大的数 : " + stats.getMax());
  System.out.println("列表中最小的数 : " + stats.getMin());
  System.out.println("所有数之和 : " + stats.getSum());
  System.out.println("平均数 : " + stats.getAverage());
    ```